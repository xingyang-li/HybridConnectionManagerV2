@model IEnumerable<HybridConnectionModel>

<!DOCTYPE html>
<html>
<head>
    <title>Object List</title>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <link href="~/lib/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
</head>
<body>
    <div class="container pt-4">
        <div class="notification-container">
            <div id="notificationBanner" class="notification-banner" style="display: none;" role="alert">
                <div class="notification-content">
                    <div class="notification-icon">
                        <i class="fas fa-check-circle"></i>
                    </div>
                    <span id="notificationMessage" class="notification-message"></span>
                </div>
                <button type="button" class="notification-close" onclick="hideNotification()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>

        <div class="d-flex align-items-center mb-4">
            <!-- Added for title section with margin bottom -->
            <h2>Hybrid Connections</h2>
        </div>

        <div class="azure-button-container">
            <button id="newButton" class="btn-azure-primary" onclick="openNewConnectionModal()">
                <i class="fas fa-plus"></i>
                New
            </button>
            <button id="refreshButton" class="btn-azure-white" onclick="refreshContent()">
                <i class="fas fa-sync-alt"></i>
                Refresh
            </button>
            <div class="azure-button-separator"></div>
            <button id="removeButton" class="btn-azure-white-danger" onclick="removeSelectedConnections()" disabled>
                <i class="fas fa-trash-alt"></i>
                Remove
            </button>
        </div>

        <div id="contentArea">
            @if (Model != null)
            {
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <td></td>
                            <th>Name</th>
                            <th>Connection Status</th>
                            <th>Namespace</th>
                            <th>Endpoint</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr class="item-row" style="cursor: pointer;"
                                data-namespace="@item.Namespace"
                                data-name="@item.Name"
                                data-endpoint="@item.Endpoint"
                                data-status="@item.Status"
                                data-created-on="@item.CreatedOn"
                                data-last-updated="@item.LastUpdated">
                                <td onclick="event.stopPropagation()">
                                    <input type="checkbox" name="selectedIds"
                                        value="@item.Name"
                                        data-namespace="@item.Namespace" 
                                        data-name="@item.Name" />
                                </td>
                                <td>@item.Name</td>
                                <td class="@(item.Status == "Connected" ? "status-connected" : "status-disconnected")">@item.Status</td>
                                <td>@item.Namespace</td>
                                <td>@item.Endpoint</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            
            @if (!Model.Any())
            {
                <p>No items found.</p>
            }
        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="detailsModal" tabindex="-1" aria-labelledby="detailsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="detailsModalLabel">Hybrid Connection Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="container-fluid">
                        <style>
                            /* Custom table styling for modal */
                            .details-table {
                                width: 100%;
                            }
                            .details-table th,
                            .details-table td {
                                padding: 8px;
                                border: none; /* Remove all borders */
                            }
                            /* Only add border between thead and tbody */
                            .details-table thead {
                                border-bottom: 2px solid #dee2e6;
                            }

                            .details-table tbody tr:hover {
                                background-color: #e9ecef;
                                transition: background-color 0.05s ease-in-out;
                                cursor: pointer;
                            }
                            /* Ensure even rows maintain distinct hover state */
                            .details-table tbody tr:nth-child(even):hover {
                                background-color: #e9ecef;
                            }
                        </style>
                        <table class="details-table">
                            <thead>
                                <tr>
                                    <th style="width: 30%">Name</th>
                                    <th>Value</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>Name</td>
                                    <td id="modal-name"></td>
                                </tr>
                                <tr>
                                    <td>Namespace</td>
                                    <td id="modal-namespace"></td>
                                </tr>
                                <tr>
                                    <td>Status</td>
                                    <td id="modal-status"></td>
                                </tr>
                                <tr>
                                    <td>Endpoint</td>
                                    <td id="modal-endpoint"></td>
                                </tr>
                                <tr>
                                    <td>Created On</td>
                                    <td id="modal-created-on"></td>
                                </tr>
                                <tr>
                                    <td>Last Updated</td>
                                    <td id="modal-last-updated"></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- New Connection Modal -->
    <div class="modal fade" id="newConnectionModal" tabindex="-1" aria-labelledby="newConnectionModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="newConnectionModalLabel">New Hybrid Connection</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="newConnectionForm">
                        <div class="mb-3">
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="radio" name="connectionType" id="connectionStringRadio" value="connectionStringType" checked>
                                <label class="form-check-label" for="connectionStringRadio">
                                    Use Connection String
                                </label>
                            </div>
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="radio" name="connectionType" id="alternativeRadio" value="alternativeType">
                                <label class="form-check-label" for="alternativeRadio">
                                    Use Alternative Method
                                </label>
                            </div>
                            <div id="connectionStringForm">
                                <label for="Connection String" class="form-label">Connection String</label>
                                <input type="text"
                                       class="form-control"
                                       id="connectionStringInput"
                                       required
                                       autocomplete="off">
                            </div>
                            <div id="alternativeForm" style="display: none;">
                                <label class="form-label">Available Subscriptions</label>
                                <select class="form-select" id="subscriptionSelect">
                                    <option selected>Select a subscription...</option>
                                </select>
                            </div>

                            <div id="newConnectionsTable" style="display: none;">
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead>
                                            <tr>
                                                <th style="width: 40px;"></th>
                                                <th>Name</th>
                                                <th>Namespace</th>
                                                <th>Endpoint</th>
                                            </tr>
                                        </thead>
                                        <tbody id="newConnectionsTableBody">
                                            <!-- Resource groups will be dynamically added here -->
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn-azure-white" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn-azure-primary" id="saveNewConnection">Create</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        let newConnectionModal;

        document.addEventListener('DOMContentLoaded', function() {
            // Initialize the Bootstrap modal
            newConnectionModal = new bootstrap.Modal(document.getElementById('newConnectionModal'));

            // Add event listener for the save button
            document.getElementById('saveNewConnection').addEventListener('click', saveNewConnection);

            const connectionTypeRadios = document.getElementsByName('connectionType');
            connectionTypeRadios.forEach(radio => {
                radio.addEventListener('change', async function() {
                    const connectionStringForm = document.getElementById('connectionStringForm');
                    const connectionStringInput = document.getElementById('connectionStringInput');
                    const alternativeForm = document.getElementById('alternativeForm');
                    const newConnectionsTable = document.getElementById('newConnectionsTable');

                    if (this.value === 'connectionStringType') {
                        connectionStringForm.style.display = 'block';
                        alternativeForm.style.display = 'none';
                        connectionStringInput.disabled = false;
                    } else {
                        connectionStringForm.style.display = 'none';
                        alternativeForm.style.display = 'block';
                        connectionStringInput.disabled = true;
                        connectionStringInput.value = '';

                        try {
                            const response = await fetch('/Main/GetSubscriptions');
                            if (!response.ok) {
                                throw new Error('Failed to fetch subscriptions');
                            }
                            const subscriptions = await response.json();

                            const subscriptionSelect = document.getElementById('subscriptionSelect');
                            // Clear existing options except the first one
                            while (subscriptionSelect.options.length > 1) {
                                subscriptionSelect.remove(1);
                            }

                            // Add new options
                            subscriptions.forEach(subscription => {
                                const option = new Option(subscription.displayName, subscription.subscriptionId);
                                subscriptionSelect.add(option);
                            });

                            // Reset new connnections table
                            newConnectionsTable.style.display = 'none';
                            document.getElementById('newConnectionsTableBody').innerHTML = '';

                        } catch (error) {
                            console.error('Error fetching subscriptions:', error);
                            alert('Error loading subscriptions. Please try again.');
                        }
                    }
                });

                document.getElementById('subscriptionSelect').addEventListener('change', async function() {
                    const newConnectionsTable = document.getElementById('newConnectionsTable');
                    const newConnectionsTableBody = document.getElementById('newConnectionsTableBody');
                    const selectAllCheckbox = document.getElementById('selectAllConnections');

                    if (this.value) {

                        try {
                            // Fetch resource groups for selected subscription
                            const response = await fetch(`/Main/GetHybridConnectionsForSubscription?subscriptionId=${encodeURIComponent(this.value)}`);
                            if (!response.ok) {
                                throw new Error('Failed to fetch connections for subscription');
                            }
                            const connections = await response.json();

                            newConnectionsTable.style.display = 'block';
                            // Clear existing table rows
                            newConnectionsTableBody.innerHTML = '';

                            // Add new rows for each resource group
                            connections.forEach(connection => {
                                const row = document.createElement('tr');
                                row.innerHTML = `
                                    <td>
                                        <input type="checkbox" class="form-check-input new-connection-checkbox" id="connectionCheckbox" name="connectionCheckbox"
                                               value="${connection.connectionString}">
                                    </td>
                                    <td>${connection.name}</td>
                                    <td>${connection.namespace}</td>
                                    <td>${connection.endpoint}</td>
                                `;
                                newConnectionsTableBody.appendChild(row);
                            });

                            // Initialize checkbox handlers
                            initializeNewConnectionCheckboxes();

                        } catch (error) {
                            console.error('Error fetching connections:', error);
                            alert('Error loading connections for subscription. Please try again.');
                            newConnectionsTable.style.display = 'none';
                        }
                    } else {
                        // Hide the table when no subscription is selected
                        newConnectionsTable.style.display = 'none';
                    }
                });
            });
        });

        document.addEventListener('DOMContentLoaded', function() {
            initializeCheckboxListeners();
            updateRemoveButton();
        });

        function initializeNewConnectionCheckboxes() {
            // Individual checkbox handlers
            const newConnectionCheckboxes = document.getElementsByName('connectionCheckbox');
            Array.from(newConnectionCheckboxes).forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    updateSaveButtonState();
                });
            });
        }

        function updateSaveButtonState() {
            const saveButton = document.getElementById('saveNewConnection');
            const hasSelectedConnections = Array.from(document.getElementsByName('connectionCheckbox'))
                .some(cb => cb.checked);

            saveButton.disabled = !hasSelectedConnections;
        }

        function initializeAllListeners(){

            initializeCheckboxListeners();
            updateRemoveButton();

            document.querySelectorAll('.item-row').forEach(row => {
                row.addEventListener('click', function() {
                    const details = {
                        namespace: this.dataset.namespace,
                        name: this.dataset.name,
                        endpoint: this.dataset.endpoint,
                        status: this.dataset.status,
                        createdOn: this.dataset.createdOn,
                        lastUpdated: this.dataset.lastUpdated
                    };
                    showDetails(details);
                });
            });
        }       

        function updateRemoveButton() {
            const selectedCount = document.querySelectorAll('input[name="selectedIds"]:checked').length;
            const removeButton = document.getElementById('removeButton');
            removeButton.disabled = selectedCount === 0;
        }

        function initializeCheckboxListeners() {
            // Listen for individual checkbox changes
            const individualCheckboxes = document.getElementsByName('selectedIds');
            individualCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', function(e) {
                    e.stopPropagation(); // Prevent row click when clicking checkbox
                    updateRemoveButton();
                });
            });
        }

        function refreshContent() {
            $("#refreshButton").prop("disabled", true);

            $.ajax({
                url: '@Url.Action("GetUpdatedData", "Main")', // Replace with your actual controller and action
                type: 'GET',
                success: function (result) {
                    $("#contentArea").html(result);
                    setTimeout(() => {
                        initializeAllListeners();
                        updateRemoveButton(); // Explicitly update remove button state
                    }, 0);
                },
                error: function (error) {
                    console.error('Error refreshing content:', error);
                    alert('Error refreshing content. Please try again.');
                },
                complete: function () {
                    $("#refreshButton").prop("disabled", false);
                }
            });
        }

        function removeSelectedConnections() {
            const selectedBoxes = document.querySelectorAll('input[name="selectedIds"]:checked');
            if (selectedBoxes.length === 0) return;

            if (!confirm('Are you sure you want to remove the selected connections?')) return;

            const selectedItems = Array.from(selectedBoxes).map(checkbox => ({
                namespace: checkbox.dataset.namespace,
                name: checkbox.dataset.name
            }));

            $.ajax({
                url: '@Url.Action("Remove", "Main")',
                type: 'POST',
                data: JSON.stringify({ connections: selectedItems }),
                contentType: 'application/json',
                success: function(result) {
                    if (result.success) {
                        const count = selectedItems.length;
                        showNotification(
                            `Successfully removed ${count} ${count === 1 ? 'connection' : 'connections'}`,
                            'success'
                        );
                        refreshContent();
                    } else {
                        alert('Error removing connections: ' + result.message);
                    }
                },
                error: function(error) {
                    console.error('Error removing connections:', error);
                    alert('Error removing connections. Please try again.');
                }
            });
        }

        function openNewConnectionModal() {
            // Clear the form
            const newConnectionForm = document.getElementById('newConnectionForm');
            const connectionStringForm = document.getElementById('connectionStringForm');
            const connectionStringInput = document.getElementById('connectionStringInput');
            const alternativeForm = document.getElementById('alternativeForm');
            const newConnectionsTable = document.getElementById('newConnectionsTable');
            const connectionStringRadio = document.getElementById("connectionStringRadio");

            newConnectionForm.reset();
            connectionStringForm.style.display = 'block';
            newConnectionsTable.style.display = 'none';
            connectionStringRadio.checked = true;
            alternativeForm.style.display = 'none';
            connectionStringInput.disabled = false;

            // Show the modal
            newConnectionModal.show();

            setTimeout(() => {
                document.getElementById('connectionStringInput').focus();
            }, 100);
        }

        function saveNewConnection() {
            const form = document.getElementById('newConnectionForm');
            const connectionType = document.querySelector('input[name="connectionType"]:checked').value;

            if (connectionType === 'connectionStringType') {
                if (!form.checkValidity()) {
                    form.reportValidity();
                    return;
                }

                const saveButton = document.getElementById('saveNewConnection');
                saveButton.disabled = true;
                saveButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Creating...';

                const data = {
                    connectionString: document.getElementById('connectionStringInput').value
                };

                $.ajax({
                    url: '@Url.Action("Add", "Main")',
                    type: 'POST',
                    data: JSON.stringify(data),
                    contentType: 'application/json',
                    success: function(result) {
                        if (result.success) {
                            newConnectionModal.hide();
                            refreshContent();
                            showNotification(
                                'Successfully added new connection',
                                'success'
                            );
                        } else {
                            alert('Error creating connection: ' + result.message);
                        }
                    },
                    error: function(error) {
                        console.error('Error creating connection:', error);
                        alert('Error creating connection. Please try again.');
                    },
                    complete: function() {
                        saveButton.disabled = false;
                        saveButton.innerHTML = 'Create';
                    }
                });
            }
            else {
                const selectedSubscription = document.getElementById('subscriptionSelect').value;
                const selectedBoxes = document.querySelectorAll('input[name="connectionCheckbox"]:checked');

                if (!selectedSubscription) {
                    alert('Please select a subscription');
                    return;
                }

                if (selectedBoxes.length === 0) return;

                const selectedItems = Array.from(selectedBoxes).map(checkbox => ({
                    connectionString: checkbox.value
                }));

                const saveButton = document.getElementById('saveNewConnection');
                saveButton.disabled = true;
                saveButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Creating...';

                const data = {
                    connections: selectedItems,
                };

                $.ajax({
                    url: '@Url.Action("AddMultiple", "Main")',
                    type: 'POST',
                    data: JSON.stringify(data),
                    contentType: 'application/json',
                    success: function(result) {
                        if (result.success) {
                            newConnectionModal.hide();
                            refreshContent();
                            const count = selectedItems.length;
                            showNotification(
                                `Successfully added ${count} ${count === 1 ? 'connection' : 'connections'}`,
                                'success'
                            );
                        } else {
                            alert('Error creating connection: ' + result.message);
                        }
                    },
                    error: function(error) {
                        console.error('Error creating connection:', error);
                        alert('Error creating connection. Please try again.');
                    },
                    complete: function() {
                        saveButton.disabled = false;
                        saveButton.innerHTML = 'Create';
                    }
                });
            }
        }

        function showDetails(item) {
            currentItem = item;

            // Update modal content
            document.getElementById('modal-name').textContent = item.name;

            // If you have these additional fields in your model:
            document.getElementById('modal-created-on').textContent = formatDate(item.createdOn);
            document.getElementById('modal-last-updated').textContent = formatDate(item.lastUpdated);
            document.getElementById('modal-status').textContent = item.status;
            document.getElementById('modal-namespace').textContent = item.namespace;
            document.getElementById('modal-endpoint').textContent = item.endpoint;

            // Show the modal
            var myModal = new bootstrap.Modal(document.getElementById('detailsModal'));
            myModal.show();
        }

        function formatDate(dateString) {
            if (!dateString) return '';
            const date = new Date(dateString);
            return date.toLocaleString();
        }

        function showNotification(message, type = 'success') {
            const banner = document.getElementById('notificationBanner');
            const messageElement = document.getElementById('notificationMessage');
            const iconElement = banner.querySelector('.notification-icon i');

            // Reset classes
            banner.className = 'notification-banner';
            banner.classList.add(type);

            // Update icon based on type
            if (type === 'success') {
                iconElement.className = 'fas fa-check-circle';
            } else if (type === 'error') {
                iconElement.className = 'fas fa-exclamation-circle';
            }

            // Set message
            messageElement.textContent = message;

            // Show banner with animation
            banner.style.display = 'flex';

            // Auto hide after 5 seconds
            const hideTimer = setTimeout(() => {
                hideNotification();
            }, 5000);

            // Store timer ID on the banner element
            banner.dataset.hideTimer = hideTimer;
        }

        function hideNotification() {
            const banner = document.getElementById('notificationBanner');

            // Clear any existing hide timer
            if (banner.dataset.hideTimer) {
                clearTimeout(parseInt(banner.dataset.hideTimer));
            }

            // Add fade-out animation
            banner.classList.add('fade-out');

            // Hide after animation completes
            setTimeout(() => {
                banner.style.display = 'none';
                banner.classList.remove('fade-out');
            }, 300);
        }

        initializeAllListeners();

    </script>
</body>
</html>