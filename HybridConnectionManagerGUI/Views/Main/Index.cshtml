@model IEnumerable<HybridConnectionModel>

<!DOCTYPE html>
<html>
<head>
    <title>Object List</title>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <link href="~/lib/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
</head>
<body>
    <div class="container pt-4">
        <div class="d-flex align-items-center mb-4">
            <!-- Added for title section with margin bottom -->
            <h2>Hybrid Connections</h2>
        </div>

        <div class="mb-3">
            <button id="newButton" class="btn btn-success me-2" onclick="showNewConnectionModal()">
                <i class="fas fa-plus"></i> New
            </button>
            <button id="refreshButton" class="btn btn-primary me-2" onclick="refreshContent()">
                <i class="fas fa-arrows-rotate"></i> Refresh
            </button>
            <button id="removeButton" class="btn btn-danger" onclick="removeSelectedConnections()" disabled>
                <i class="fas fa-trash"></i> Remove
            </button>
        </div>

        <div id="contentArea">
            @if (Model != null)
            {
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <td>
                                <input type="checkbox" id="selectAll" />
                            </td>
                            <th>Name</th>
                            <th>Connection Status</th>
                            <th>Namespace</th>
                            <th>Endpoint</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr class="item-row" style="cursor: pointer;"
                                data-namespace="@item.Namespace"
                                data-name="@item.Name"
                                data-endpoint="@item.Endpoint"
                                data-status="@item.Status"
                                data-created-on="@item.CreatedOn"
                                data-last-updated="@item.LastUpdated">
                                <td onclick="event.stopPropagation()">
                                    <input type="checkbox" name="selectedIds"
                                        value="@item.Name"
                                        data-namespace="@item.Namespace" 
                                        data-name="@item.Name" />
                                </td>
                                <td>@item.Name</td>
                                <td>@item.Status</td>
                                <td>@item.Namespace</td>
                                <td>@item.Endpoint</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            
            @if (!Model.Any())
            {
                <p>No items found.</p>
            }
        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="detailsModal" tabindex="-1" aria-labelledby="detailsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="detailsModalLabel">Hybrid Connection Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="container-fluid">
                        <style>
                            /* Custom table styling for modal */
                            .details-table {
                                width: 100%;
                            }
                            .details-table th,
                            .details-table td {
                                padding: 8px;
                                border: none; /* Remove all borders */
                            }
                            /* Only add border between thead and tbody */
                            .details-table thead {
                                border-bottom: 2px solid #dee2e6;
                            }

                            .details-table tbody tr:hover {
                                background-color: #e9ecef;
                                transition: background-color 0.05s ease-in-out;
                                cursor: pointer;
                            }
                            /* Ensure even rows maintain distinct hover state */
                            .details-table tbody tr:nth-child(even):hover {
                                background-color: #e9ecef;
                            }
                        </style>
                        <table class="details-table">
                            <thead>
                                <tr>
                                    <th style="width: 30%">Name</th>
                                    <th>Value</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>Name</td>
                                    <td id="modal-name"></td>
                                </tr>
                                <tr>
                                    <td>Namespace</td>
                                    <td id="modal-namespace"></td>
                                </tr>
                                <tr>
                                    <td>Status</td>
                                    <td id="modal-status"></td>
                                </tr>
                                <tr>
                                    <td>Endpoint</td>
                                    <td id="modal-endpoint"></td>
                                </tr>
                                <tr>
                                    <td>Created On</td>
                                    <td id="modal-created-on"></td>
                                </tr>
                                <tr>
                                    <td>Last Updated</td>
                                    <td id="modal-last-updated"></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <script>

        document.addEventListener('DOMContentLoaded', function() {
        initializeCheckboxListeners();
        updateRemoveButton();
        });

        function initializeAllListeners(){

            initializeCheckboxListeners();
            updateRemoveButton();

            document.querySelectorAll('.item-row').forEach(row => {
                row.addEventListener('click', function() {
                    const details = {
                        namespace: this.dataset.namespace,
                        name: this.dataset.name,
                        endpoint: this.dataset.endpoint,
                        status: this.dataset.status,
                        createdOn: this.dataset.createdOn,
                        lastUpdated: this.dataset.lastUpdated
                    };
                    showDetails(details);
                });
            });
        }       

        function updateRemoveButton() {
            const selectedCount = document.querySelectorAll('input[name="selectedIds"]:checked').length;
            const removeButton = document.getElementById('removeButton');
            removeButton.disabled = selectedCount === 0;
        }

        // Update the checkbox event listeners
        function initializeCheckboxListeners() {
            // Listen for "Select All" checkbox changes
            const selectAllCheckbox = document.getElementById('selectAll');
            if (selectAllCheckbox) {
                selectAllCheckbox.addEventListener('change', function() {
                    const checkboxes = document.getElementsByName('selectedIds');
                    checkboxes.forEach(checkbox => {
                        checkbox.checked = this.checked;
                    });
                    updateRemoveButton();
                });
            }

            // Listen for individual checkbox changes
            const individualCheckboxes = document.getElementsByName('selectedIds');
            individualCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', function(e) {
                    e.stopPropagation(); // Prevent row click when clicking checkbox
                    updateRemoveButton();
                });
            });
        }

        function refreshContent() {
            $("#refreshButton").prop("disabled", true);

            $.ajax({
                url: '@Url.Action("GetUpdatedData", "Main")', // Replace with your actual controller and action
                type: 'GET',
                success: function (result) {
                    $("#contentArea").html(result);
                    setTimeout(() => {
                        initializeAllListeners();
                        updateRemoveButton(); // Explicitly update remove button state
                    }, 0);
                },
                error: function (error) {
                    console.error('Error refreshing content:', error);
                    alert('Error refreshing content. Please try again.');
                },
                complete: function () {
                    $("#refreshButton").prop("disabled", false);
                }
            });
        }

        function removeSelectedConnections() {
            const selectedBoxes = document.querySelectorAll('input[name="selectedIds"]:checked');
            if (selectedBoxes.length === 0) return;

            if (!confirm('Are you sure you want to remove the selected connections?')) return;

            const selectedItems = Array.from(selectedBoxes).map(checkbox => ({
                namespace: checkbox.dataset.namespace,
                name: checkbox.dataset.name
            }));

            $.ajax({
                url: '@Url.Action("Remove", "Main")',
                type: 'POST',
                data: JSON.stringify({ connections: selectedItems }),
                contentType: 'application/json',
                success: function(result) {
                    if (result.success) {
                        refreshContent();
                    } else {
                        alert('Error removing connections: ' + result.message);
                    }
                },
                error: function(error) {
                    console.error('Error removing connections:', error);
                    alert('Error removing connections. Please try again.');
                }
            });
        }

        function showDetails(item) {
            currentItem = item;

            // Update modal content
            document.getElementById('modal-name').textContent = item.name;

            // If you have these additional fields in your model:
            document.getElementById('modal-created-on').textContent = formatDate(item.createdOn);
            document.getElementById('modal-last-updated').textContent = formatDate(item.lastUpdated);
            document.getElementById('modal-status').textContent = item.status;
            document.getElementById('modal-namespace').textContent = item.namespace;
            document.getElementById('modal-endpoint').textContent = item.endpoint;

            // Show the modal
            var myModal = new bootstrap.Modal(document.getElementById('detailsModal'));
            myModal.show();
        }

        function formatDate(dateString) {
            if (!dateString) return '';
            const date = new Date(dateString);
            return date.toLocaleString();
        }

        initializeAllListeners();

    </script>
</body>
</html>